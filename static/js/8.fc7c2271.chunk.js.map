{"version":3,"sources":["components/Produce/QueryForm.js","pages/Produce/Report.js"],"names":["create","form","queryItems","queryRecord","addRecord","batchRecord","deleteRecord","exportExcel","handleExport","validateFields","err","values","formButtons","text","handerClick","type","resetFields","itemCommonProps","handleBlur","e","setFieldsValue","target","id","value","trim","layout","formItems","renderTailPart","map","button","key","style","marginRight","onClick","className","moduleName","name","displayName","connect","state","report","dispatch","list","pageInfo","loading","useState","current","pageSize","showSizeChanger","showTotal","total","pagination","setPagination","queryParams","setQueryParams","data","title","a","employee","flow","orderSizeCost","header","item","employeeName","length","error","res","orderList","filter","v","flowId","flowName","subItem","order","find","employeeId","size","cost","sum","totalSize","totalCost","unshift","push","worksheet","XLSX","utils","aoa_to_sheet","workbook","book_new","book_append_sheet","writeFile","columns","dataIndex","width","records","temp","forEach","time","createTime","format","payload","createTimeStart","createTimeEnd","pageNo","then","code","msg","xlsx","buttonText","queryButtonText","tip","spinning","dataSource","bordered","onChange","curPageInfo","rowKey","marginTop","fontWeight"],"mappings":"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","file":"static/js/8.fc7c2271.chunk.js","sourcesContent":["import React from 'react'\r\nimport { Form, Button } from 'antd'\r\n\r\nimport CommonForm from './CommonForm'\r\nimport './index.css'\r\n\r\nfunction QueryForm({ form, queryItems = [], queryRecord, addRecord, batchRecord, deleteRecord, exportExcel }) {\r\n  function query() {\r\n    form.validateFields((err, values) => {\r\n      if (err) {\r\n        return\r\n      }\r\n\r\n      queryRecord(values)\r\n    })\r\n  }\r\n\r\n  function handleExport() {\r\n    form.validateFields((err, values) => {\r\n      if (err) {\r\n        return\r\n      }\r\n\r\n      exportExcel(values)\r\n    })\r\n  }\r\n\r\n  function reset() {\r\n    form.resetFields()\r\n  }\r\n\r\n  const formButtons = [\r\n    {\r\n      text: '查询',\r\n      handerClick: query,\r\n      type: 'primary',\r\n    },\r\n    {\r\n      text: '重置',\r\n      handerClick: reset,\r\n    },\r\n  ]\r\n\r\n  const itemCommonProps = {\r\n    handleBlur: e => {\r\n      form.setFieldsValue({ [e.target.id]: e.target.value.trim() })\r\n    },\r\n  }\r\n\r\n  return (\r\n    <CommonForm\r\n      layout=\"inline\"\r\n      form={form}\r\n      formItems={queryItems}\r\n      itemCommonProps={itemCommonProps}\r\n      renderTailPart={() => (\r\n        <div>\r\n          {formButtons.map(button => (\r\n            <Button key={button.text} type={button.type} style={{ marginRight: 16 }} onClick={button.handerClick}>\r\n              {button.text}\r\n            </Button>\r\n          ))}\r\n          {addRecord && (\r\n            <Button type=\"primary\" style={{ marginRight: 16 }} onClick={addRecord}>\r\n              新增\r\n            </Button>\r\n          )}\r\n          {batchRecord && (\r\n            <Button className=\"btn-orange\" style={{ marginRight: 16 }} onClick={batchRecord}>\r\n              批量管理\r\n            </Button>\r\n          )}\r\n          {deleteRecord && (\r\n            <Button className=\"btn-orange\" style={{ marginRight: 16 }} onClick={deleteRecord}>\r\n              批量删除\r\n            </Button>\r\n          )}\r\n          {exportExcel && (\r\n            <Button className=\"btn-orange\" style={{ marginRight: 16 }} onClick={handleExport}>\r\n              导出Excel\r\n            </Button>\r\n          )}\r\n        </div>\r\n      )}\r\n    />\r\n  )\r\n}\r\n\r\nexport default Form.create()(QueryForm)\r\n","import React, { useState } from 'react'\r\nimport { Card, Table, Spin, message } from 'antd'\r\nimport { connect } from 'dva'\r\nimport XLSX from 'xlsx'\r\n\r\nimport './index.css'\r\n\r\nimport QueryForm from '../../components/Produce/QueryForm'\r\n\r\nconst moduleName = 'report'\r\nconst moduleCnName = '报表'\r\n\r\nconst queryItems = [\r\n  {\r\n    type: 'rangepicker',\r\n    name: 'time',\r\n    displayName: '起始时间',\r\n  },\r\n]\r\n\r\nfunction Report({ dispatch, list, pageInfo, loading }) {\r\n  const [pagination, setPagination] = useState({\r\n    current: 1,\r\n    pageSize: 10,\r\n    showSizeChanger: true,\r\n    showTotal,\r\n  })\r\n  const [queryParams, setQueryParams] = useState({})\r\n\r\n  function queryRecord(values) {\r\n    const { time = [] } = values\r\n    const createTime = []\r\n\r\n    if (time.length === 2) {\r\n      createTime[0] = `${time[0].format('YYYY-MM-DD')} 00:00:00`\r\n      createTime[1] = `${time[1].format('YYYY-MM-DD')} 23:59:59`\r\n    }\r\n\r\n    const payload = { createTimeStart: createTime[0], createTimeEnd: createTime[1], pageNo: 1, pageSize: pagination.pageSize }\r\n    setQueryParams(payload)\r\n\r\n    dispatch({\r\n      type: `${moduleName}/fetchList`,\r\n      payload,\r\n    })\r\n  }\r\n\r\n  function exportExcel(values) {\r\n    const { time = [] } = values\r\n    const createTime = []\r\n\r\n    if (time.length !== 2) {\r\n      message.error('请选择导出的日期范围')\r\n      return\r\n    }\r\n\r\n    if (time.length === 2) {\r\n      createTime[0] = `${time[0].format('YYYY-MM-DD')} 00:00:00`\r\n      createTime[1] = `${time[1].format('YYYY-MM-DD')} 23:59:59`\r\n    }\r\n\r\n    const payload = { createTimeStart: createTime[0], createTimeEnd: createTime[1] }\r\n\r\n    dispatch({\r\n      type: `${moduleName}/fetchListAll`,\r\n      payload,\r\n    }).then(data => {\r\n      if (data.code) {\r\n        message.error(data.msg || '获取全量数据错误')\r\n        return\r\n      }\r\n\r\n      const title = `${createTime[0]}- ${createTime[1]}报表`\r\n      xlsx(data.data, title)\r\n    })\r\n  }\r\n\r\n  async function xlsx(data, title) {\r\n    const { employee = [], flow = [], orderSizeCost = [] } = data\r\n\r\n    const header = ['工序名称', ...employee.map(item => item.employeeName)]\r\n\r\n    if (orderSizeCost.length === 0) {\r\n      message.error('当前时间段报表订单信息为空，请重新选择')\r\n      return\r\n    }\r\n\r\n    const res = flow.map(item => {\r\n      // 找到该工序下的所有订单信息\r\n      const orderList = orderSizeCost.filter(v => v.flowId === item.flowId)\r\n      return [\r\n        item.flowName,\r\n        ...employee.map(subItem => {\r\n          const order = orderList.find(order => order.employeeId === subItem.employeeId)\r\n          if (!order) {\r\n            return ''\r\n          }\r\n          return `${order.size}件/${order.cost}元`\r\n        }),\r\n      ]\r\n    })\r\n\r\n    const sum = ['汇总', ...employee.map(item => (item.totalSize && item.totalCost ? `${item.totalSize}件/${item.totalCost}元` : ''))]\r\n\r\n    res.unshift(header)\r\n    res.push(sum)\r\n    const worksheet = XLSX.utils.aoa_to_sheet(res)\r\n    const workbook = XLSX.utils.book_new()\r\n    XLSX.utils.book_append_sheet(workbook, worksheet, '报表数据')\r\n\r\n    XLSX.writeFile(workbook, `${title}.xlsx`)\r\n  }\r\n\r\n  function tableChange(pageInfo) {\r\n    const curPageInfo = { ...pagination, ...pageInfo }\r\n    setPagination(curPageInfo)\r\n\r\n    const payload = {\r\n      ...queryParams,\r\n      pageNo: curPageInfo.current,\r\n      pageSize: curPageInfo.pageSize,\r\n    }\r\n    setQueryParams(payload)\r\n\r\n    dispatch({\r\n      type: `${moduleName}/fetchList`,\r\n      payload,\r\n    })\r\n  }\r\n\r\n  function showTotal(total) {\r\n    return `共 ${total} 员工`\r\n  }\r\n\r\n  function generateColumns(data) {\r\n    return [\r\n      {\r\n        title: '工序名称',\r\n        dataIndex: 'flowName',\r\n        key: 'flowName',\r\n        width: 100,\r\n      },\r\n      ...data.map(item => ({\r\n        title: item.employeeName,\r\n        dataIndex: item.employeeId,\r\n        key: item.employeeId,\r\n        width: 100,\r\n      })),\r\n    ]\r\n  }\r\n\r\n  const { employee = [], flow = [], orderSizeCost = [] } = list\r\n  const columns = generateColumns(employee)\r\n  const records = []\r\n\r\n  if (orderSizeCost.length) {\r\n    records.push(\r\n      ...flow.map(item => {\r\n        const temp = {}\r\n        // 找到该工序下的所有订单信息\r\n        const orderList = orderSizeCost.filter(v => v.flowId === item.flowId)\r\n\r\n        orderList.forEach(order => {\r\n          temp[order.employeeId] = `${order.size}件/${order.cost}元`\r\n        })\r\n\r\n        temp.flowName = `${item.flowName} (编号:${item.flowId})`\r\n\r\n        return temp\r\n      })\r\n    )\r\n\r\n    const sum = { flowName: '汇总' }\r\n    employee.forEach(item => {\r\n      if (item.totalSize && item.totalCost) {\r\n        sum[item.employeeId] = `${item.totalSize}件/${item.totalCost}元`\r\n      }\r\n    })\r\n    records.push(sum)\r\n  }\r\n\r\n  return (\r\n    <Card>\r\n      <QueryForm queryItems={queryItems} queryRecord={queryRecord} exportExcel={exportExcel} buttonText={{ queryButtonText: '生成报表' }} />\r\n      <Spin tip=\"努力加载中...\" spinning={loading.list || false}>\r\n        <Table\r\n          className=\"report-table\"\r\n          size=\"small\"\r\n          dataSource={records}\r\n          columns={columns}\r\n          bordered\r\n          onChange={tableChange}\r\n          pagination={{ ...pagination, total: pageInfo.total }}\r\n          rowKey=\"flowName\"\r\n        />\r\n      </Spin>\r\n      <div>\r\n        <p style={{ marginTop: 10 }}>\r\n          工序行：统计员工<span style={{ fontWeight: 'bold', marginRight: 20 }}>一个工序下所做订单的总件数/总费用</span>\r\n          汇总行：统计员工<span style={{ fontWeight: 'bold' }}>做全部订单的总件数/总费用</span>\r\n        </p>\r\n      </div>\r\n    </Card>\r\n  )\r\n}\r\n\r\nexport default connect(state => ({\r\n  ...state.report,\r\n}))(Report)\r\n"],"sourceRoot":""}